# Constants from my input:
#
# - In chunks of 18, only lines 5, 6, and 16 are different.
#   - L5 always divides z by 1 or 26.
#   - L6 always adds an int to x after initializing it to the value of z % 26.
#   - L16 always adds an int to y after initializing it to the value of w.
#
# Distinct constant ops for all 14 steps are:
#
#  1. z /= 1,  x = (z % 26) + 15, y = w + 15
#  2. z /= 1,  x = (z % 26) + 15, y = w + 10
#  3. z /= 1,  x = (z % 26) + 12, y = w + 2
#  4. z /= 1,  x = (z % 26) + 13, y = w + 16
#  5. z /= 26, x = (z % 26) - 12, y = w + 12
#  6. z /= 1,  x = (z % 26) + 10, y = w + 11
#  7. z /= 26, x = (z % 26) -  9, y = w + 5
#  8. z /= 1,  x = (z % 26) + 14, y = w + 16
#  9. z /= 1,  x = (z % 26) + 13, y = w + 6
# 10. z /= 26, x = (z % 26) - 14, y = w + 15
# 11. z /= 26, x = (z % 26) - 11, y = w + 3
# 12. z /= 26, x = (z % 26) -  2, y = w + 12
# 13. z /= 26, x = (z % 26) - 16, y = w + 10
# 14. z /= 26, x = (z % 26) - 14, y = w + 13
#
# In this uniform chunk of opcodes, the following *always* happens:
# eql x w   \
# eql x 0   / x = 0 if x == w else 1
# mul y 0   \
# add y 25   \
# mul y x    /
# add y 1   / y = 25 * x + 1
# mul z y   -> z *= y
#
# y is always 1 or 26, depending on the equality check eql x w.
#
# In the stages where z is *not* knocked down (z /= 1), the equality check in
# line 7 will always fail for our input. z will be multiplied by 26 in line 13
# and add (w + C) in line 16. This is equivalent to appending a digit in base 26.
#
# Even in the stages where z is divided by 26, z will grow unless we can
# reliably force y to be 1, *not* 26, when z is multiplied by y in line 13.
# Carrying through the operations, this can only happen when we pass a digit
# that is equal to the value of x after line 6.
#
# Looking at z's size in base 26, we can reduce z to 0 if and only if we add
# exactly one digit (w + C) in the z /= 1 chunks and remove exactly one digit
# in the z /= 26 chunks.
#
# Our base 26 digit stack will progress as follows:
#
#  1. [w1 + 15]
#  2. [w1 + 15, w2 + 10]
#  3. [w1 + 15, w2 + 10, w3 + 2]
#  4. [w1 + 15, w2 + 10, w3 + 2, w4 + 16]
#  5. [w1 + 15, w2 + 10, w3 + 2] if w5 == (w4 + 16) - 12 == w4 + 4
#  6. [w1 + 15, w2 + 10, w3 + 2, w6 + 11]
#  7. [w1 + 15, w2 + 10, w3 + 2] if w7 == (w6 + 11) - 9 == w6 + 2
#  8. [w1 + 15, w2 + 10, w3 + 2, w8 + 16]
#  9. [w1 + 15, w2 + 10, w3 + 2, w8 + 16, w9 + 6]
# 10. [w1 + 15, w2 + 10, w3 + 2, w8 + 16] if w10 == (w9 + 6) - 14 == w9 - 8
# 11. [w1 + 15, w2 + 10, w3 + 2] if w11 == (w8 + 16) - 11 == w8 + 5
# 12. [w1 + 15, w2 + 10] if w12 == (w3 + 2) - 2 == w3
# 13. [w1 + 15] if w13 == (w2 + 10) - 16 == w2 - 6
# 14. [] if w14 == (w1 + 15) - 14 == w1 + 1
#
# Simplifying for our 7 concise digit relationships in ascending order:
# w1 == w14 - 1
# w2 == w13 + 6
# w3 == w12
# w4 == w5 - 4
# w6 == w7 - 2
# w8 == w11 - 5
# w9 == w10 + 8

Applying these constraints yields both the largest (89959794919939) and
smallest (17115131916112) valid model numbers.

----------------
inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 15
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 10
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 12
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 2
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 16
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -12
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 12
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 11
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -9
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 5
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 16
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 15
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -11
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 3
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -2
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 12
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -16
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 10
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y
